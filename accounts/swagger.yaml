swagger: "2.0"
info:
  title: Account API
  version: '1.0'
  description: API для управления аккаунтами
  contact:
    name: API Support
    url: https://github.com/Jammeren2/konkurs
schemes:
  - http
basePath: /

securityDefinitions: 
    Bearer:
      type: apiKey
      in: header
      name: Authorization
      description: "Вставьте токен в формате: Bearer токен"

security:
  - Bearer: []

paths:
  /api/Authentication/SignUp:
    post:
      summary: Регистрация пользователя
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              lastName:
                type: string
                description: Фамилия пользователя
              firstName:
                type: string
                description: Имя пользователя
              username:
                type: string
                description: Имя для входа
              password:
                type: string
                description: Пароль пользователя
            required:
              - lastName
              - firstName
              - username
              - password
      responses:
        '201':
          description: Account created
        '400':
          description: User already exists

  /api/Authentication/SignIn:
    post:
      tags: [
        "Authentication"
      ]
      summary: Вход пользователя
      parameters:
        - name: "username"
          in: "query"
          required: true
          type: string
          schema:
            type: string
            properties:
                - name: username
                  in: "query"
                  required: true
                  type: string
        - name: "password"
          in: "query"
          required: true
          type: string
          schema:
            type: string
            properties:
                - name: password
                  in: "query"
                  required: true
                  type: string
      responses:
        '200':
          description: Успешный вход
        '401':
          description: UNAUTHORIZED


  /api/Authentication/SignOut:
    put:
      summary: Выход
      security:
        - Bearer: []
      responses:
        '200':
          description: User signed out

  /api/Authentication/Validate:
    get:
      summary: Проверка токена
      parameters:
        - in: query
          name: accessToken
          schema:
            type: string
          required: true
          description: JWT токен
      responses:
        '200':
          description: Token is valid
        '401':
          description: Invalid token

  /api/Authentication/Refresh:
    post:
      summary: Обновление токена
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              refreshToken:
                type: string
                description: Токен для обновления
            required:
              - refreshToken
      responses:
        '200':
          description: Новый токен доступа

  /api/Accounts/Me:
    get:
      summary: Получить информацию о текущем аккаунте
      security:
        - Bearer: []
      responses:
        '200':
          description: Информация о пользователе
        '404':
          description: User not found

  /api/Accounts/Update:
    put:
      summary: Обновить информацию о текущем аккаунте
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              lastName:
                type: string
                description: Новая фамилия
              firstName:
                type: string
                description: Новое имя
              password:
                type: string
                description: Новый пароль
      responses:
        '200':
          description: Account updated successfully
        '404':
          description: User not found

  /api/Accounts:
    get:
      summary: Получить всех пользователей
      security:
        - Bearer: []
      parameters:
        - in: query
          name: from
          schema:
            type: integer
          description: Начало пагинации
        - in: query
          name: count
          schema:
            type: integer
          description: Количество записей
      responses:
        '200':
          description: Список пользователей
        '403':
          description: Access denied
    post:
      summary: Создать нового пользователя
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              lastName:
                type: string
                description: Фамилия пользователя
              firstName:
                type: string
                description: Имя пользователя
              username:
                type: string
                description: Имя для входа
              password:
                type: string
                description: Пароль пользователя
            required:
              - lastName
              - firstName
              - username
              - password
      responses:
        '201':
          description: Account created
        '403':
          description: Access denied

  /api/Accounts/{id}:
    put:
      summary: Обновить пользователя по ID
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID пользователя
        - in: body
          name: body
          schema:
            type: object
            properties:
              lastName:
                type: string
                description: Фамилия пользователя
              firstName:
                type: string
                description: Имя пользователя
              username:
                type: string
                description: Имя для входа
              password:
                type: string
                description: Пароль пользователя
      responses:
        '200':
          description: Account updated successfully
        '403':
          description: Access denied
        '404':
          description: User not found
    delete:
      summary: Удалить пользователя по ID
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            required: true
            description: ID пользователя
      responses:
        '200':
          description: Account soft deleted
        '403':
          description: Access denied

  /api/Doctors:
    get:
      summary: Получить всех врачей
      security:
        - Bearer: []
      parameters:
        - in: query
          name: nameFilter
          schema:
            type: string
          description: Фильтр по имени
        - in: query
          name: from
          schema:
            type: integer
          description: Начало пагинации
        - in: query
          name: count
          schema:
            type: integer
          description: Количество записей
      responses:
        '200':
          description: Список врачей
        '403':
          description: Access denied

  /api/Doctors/{id}:
    get:
      summary: Получить информацию о враче по ID
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            required: true
            description: ID врача
      responses:
        '200':
          description: Информация о враче
        '403':
          description: Access denied
        '404':
          description: Doctor not found
